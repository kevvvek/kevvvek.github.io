{"version":3,"sources":["BaseScene.ts","DefaultGameSetting.ts","GameSetting.ts","GameManager.ts","MainScene.ts","GameScene.ts","BootstrapScene.ts","LoadingScene.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["BaseScene","key","image","this","add","game","canvas","width","height","xRatio","yRatio","setOrigin","setScale","text","y","graphics","fillStyle","fillRoundedRect","button","color","align","fontStyle","setInteractive","Phaser","Scene","DefaultGameSetting","column","row","tiles","x","terrane","terraneCode","building","buildingCode","player","initialize","tile","filter","a","push","GameManager","gameSetting","MainScene","addBackground","addButton","on","gameManager","loadDefault","scene","start","window","onkeyup","e","keyCode","renderer","snapshot","arg","style","paddingLeft","document","body","appendChild","GameScene","tileOffsetX","tileOffsetY","tileSize","_gameManager","map","make","tilemap","addTilesetImage","createStaticLayer","setX","setY","forEach","drawTerrane","drawBuilding","sprite","setTint","BootstrapScene","load","LoadingScene","spritesheet","frameWidth","frameHeight","tilemapTiledJSON","setTimeout","App","app","React","createRef","useEffect","config","type","CANVAS","scale","mode","Scale","ScaleModes","FIT","render","pixelArt","Game","ref","className","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.59d8163a.chunk.js","sourcesContent":["export class BaseScene extends Phaser.Scene {\r\n    addBackground(key: string) {\r\n        const image = this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, key);\r\n        const xRatio = this.game.canvas.width as number / image.width;\r\n        const yRatio = this.game.canvas.height as number / image.height;\r\n\r\n        image.setOrigin(0.5, 0.5);\r\n\r\n        if (xRatio >= yRatio) {\r\n            image.setScale(xRatio, xRatio);\r\n        }\r\n        if (yRatio > xRatio) {\r\n            image.setScale(yRatio, yRatio);\r\n        }\r\n    }\r\n\r\n    // y: 0-1\r\n    addButton(yRatio: number, text: string) {\r\n        const height = 50;\r\n        const y = this.game.canvas.height * yRatio - height / 2;\r\n        const x = 15;\r\n        const width = this.game.canvas.width - 30;\r\n\r\n        const graphics = this.add.graphics();\r\n        graphics.fillStyle(0x888888, 0.5);\r\n        graphics.fillRoundedRect(x, y, width, height, 10);\r\n\r\n        const button = this.add.text(this.game.canvas.width / 2, this.game.canvas.height / 2,\r\n            text, { color: '#fff', align: \"center\", fontStyle: \"bold\" }).setOrigin(0.5, 0.5);\r\n        button.setInteractive();\r\n        return button;\r\n    }\r\n}","import GameSetting from \"./GameSetting\";\r\n\r\nexport default class DefaultGameSetting extends GameSetting {\r\n    constructor() {\r\n        super();\r\n        this.column = 11;\r\n        this.row = 20;\r\n        this.tiles = [\r\n            { x: 0, y: 0, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 1, y: 0, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 2, y: 0, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 3, y: 0, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 4, y: 0, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 5, y: 0, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 6, y: 0, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 7, y: 0, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 8, y: 0, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 9, y: 0, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 0, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 1, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 1, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 2, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 2, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 3, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 3, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 4, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 4, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 5, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 5, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 6, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 6, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 7, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 7, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 8, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 8, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 9, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 9, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 10, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 10, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 11, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 11, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 12, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 12, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 13, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 13, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 14, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 14, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 15, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 15, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 16, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 16, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 17, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 17, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 18, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 18, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 1, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 2, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 3, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 4, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 5, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 6, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 7, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 8, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 9, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 10, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 0, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 5, y: 2, building: { buildingCode: \"Castle\", player: 0 } },\r\n            { x: 0, y: 19, terrane: { terraneCode: \"Tree\" } },\r\n            { x: 5, y: 17, building: { buildingCode: \"Castle\", player: 1 } },\r\n        ];\r\n\r\n\r\n        this.initialize();\r\n    }\r\n}","export default class GameSetting {\r\n    column: number = 0\r\n    row: number = 0\r\n\r\n    tiles: GameTile[] = []\r\n\r\n\r\n    initialize() {\r\n        for (let x = 0; x < this.column; x++) {\r\n            for (let y = 0; y < this.row; y++) {\r\n                let tile = this.tiles.filter(a => a.x == x && a.y == y)[0];\r\n                if (!tile) {\r\n                    tile = { x: x, y: y };\r\n                    this.tiles.push(tile);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class GameTile {\r\n    x: number = 0\r\n    y: number = 0\r\n    terrane?: GameTerrane\r\n    building?: GameBuilding\r\n}\r\n\r\nclass GameTerrane {\r\n    terraneCode: string = \"\"\r\n}\r\n\r\nclass GameBuilding {\r\n    buildingCode: string = \"\"\r\n    player: number = 0\r\n}\r\n\r\n","import GameSetting from \"./GameSetting\";\r\nimport DefaultGameSetting from \"./DefaultGameSetting\";\r\n\r\n\r\nexport class GameManager {\r\n    gameSetting!: GameSetting;\r\n\r\n    loadDefault() {\r\n        this.gameSetting = new DefaultGameSetting();\r\n    }\r\n\r\n\r\n}","import { BaseScene } from \"./BaseScene\";\r\nimport { GameManager } from \"./GameManager\";\r\n\r\nexport default class MainScene extends BaseScene {\r\n    constructor() {\r\n        super(\"main\");\r\n    }\r\n    create() {\r\n        this.addBackground(\"background\");\r\n        const start = this.addButton(0.5, \"Start\");\r\n\r\n        start.on(\"pointerup\", () => {\r\n            const gameManager = new GameManager();\r\n            gameManager.loadDefault();\r\n            this.game.scene.start(\"game\", gameManager);\r\n        });\r\n\r\n        // print screen\r\n        window.onkeyup = (e: any) => {\r\n            if (e.keyCode === 44) {\r\n                this.game.renderer.snapshot((arg) => {\r\n                    let image = arg as HTMLImageElement;\r\n                    image.style.width = `${this.game.canvas.width}px`;\r\n                    image.style.height = `${this.game.canvas.height}px`;\r\n                    image.style.paddingLeft = '2px';\r\n                    // snapHistory.push(image);\r\n                    // console.log('snap!');\r\n                    document.body.appendChild(image);\r\n                });\r\n            }\r\n        };\r\n    }\r\n}","import { BaseScene } from \"./BaseScene\";\r\nimport { GameManager } from \"./GameManager\";\r\nimport { GameTile } from \"./GameSetting\";\r\n\r\nexport default class GameScene extends BaseScene {\r\n    gameManager!: GameManager;\r\n\r\n    tileOffsetX: number = 10;\r\n    tileOffsetY: number = 10;\r\n\r\n    init(_gameManager: GameManager) {\r\n        this.gameManager = _gameManager;\r\n    }\r\n\r\n    create() {\r\n        this.addBackground(\"background\");\r\n\r\n        // this.gameManager?.gameSetting.tiles.forEach(tile => {\r\n        //     this.add.sprite(this.getTileX(tile.x), 100 + this.getTileY(tile.y), \"tile\").setOrigin(0.5, 0.5);\r\n        // });\r\n\r\n\r\n\r\n        const map = this.make.tilemap({ key: 'map' });\r\n        const tiles = map.addTilesetImage('pipo-map001', 'tiles', 32, 32);\r\n        const ground = map.createStaticLayer('ground', tiles, 0, 0).setX(this.tileOffsetX).setY(this.tileOffsetY);\r\n\r\n        //const tree = map.createStaticLayer('trees', tiles, 0, 0);\r\n\r\n        this.gameManager?.gameSetting.tiles.forEach(tile => {\r\n            if (tile.terrane) {\r\n                this.drawTerrane(tile);\r\n            }\r\n            if (tile.building) {\r\n                this.drawBuilding(tile);\r\n            }\r\n            // this.add.sprite(tile.x * 32 + this.tileOffsetX, tile.y * 32 + this.tileOffsetY, \"tile\").setOrigin(0, 0);\r\n        });\r\n\r\n    }\r\n\r\n    drawTerrane(tile: GameTile) {\r\n        if (tile.terrane?.terraneCode == \"Tree\") {\r\n            this.add.sprite(tile.x * 32 + this.tileOffsetX, tile.y * 32 + this.tileOffsetY, \"world\", 10).setOrigin(0, 0);\r\n        }\r\n    }\r\n    drawBuilding(tile: GameTile) {\r\n        const building = tile.building;\r\n        if (building?.buildingCode == \"Castle\") {\r\n            const sprite = this.add.sprite(tile.x * 32 + this.tileOffsetX, tile.y * 32 + this.tileOffsetY, \"world\", 74).setOrigin(0, 0);\r\n            if (building.player == 0) {\r\n                sprite.setTint(0xcccccc);\r\n            } else {\r\n                sprite.setTint(0x333333);\r\n            }\r\n        }\r\n    }\r\n\r\n    tileSize: number = 50;\r\n    // getTileX(x: number) {\r\n    //     const start = (this.game.canvas.width / 2) - (this.gameManager.gameSetting.column - 1) / 2 * this.tileSize;\r\n    //     return start + 50 * x;\r\n    // }\r\n\r\n    // getTileY(y: number) {\r\n    //     return y * this.tileSize;\r\n    // }\r\n}","import { BaseScene } from \"./BaseScene\";\r\n\r\nexport default class BootstrapScene extends BaseScene {\r\n    init() {\r\n        //this.scale.scaleMode = Phaser.Scale.ScaleModes.FIT;\r\n    }\r\n    preload() {\r\n        this.add.text(this.game.canvas.width/2, this.game.canvas.height/2, \"Loading...\").setOrigin(0.5,0.5);\r\n        this.load.image(\"splash\", \"splash.jpg\");\r\n    }\r\n    create() {\r\n        this.scene.start(\"loading\");\r\n    }\r\n}","import { BaseScene } from \"./BaseScene\";\r\n\r\nexport default class LoadingScene extends BaseScene {\r\n    init() {\r\n        //this.scale.scaleMode = Phaser.Scale.ScaleModes.RESIZE;\r\n    }\r\n    preload() {\r\n        this.addBackground(\"splash\");\r\n\r\n        this.load.image(\"background\", \"assets/unsplash/isaac-quesada-1AyqZcC7zSg-unsplash.jpg\");\r\n        this.load.image(\"tile\", \"assets/last-guardian-sprites/man4_fr1.gif\");\r\n\r\n        this.load.spritesheet(\"world\", \"assets/Pipoya RPG World Tileset 48x48 40x40 32x32/32x32/pipo-map001.png\",\r\n            { frameWidth: 32, frameHeight: 32 });\r\n\r\n        this.load.tilemapTiledJSON('map', 'maps/200710.json');\r\n        this.load.image('tiles', 'assets/Pipoya RPG World Tileset 48x48 40x40 32x32/32x32/pipo-map001.png');\r\n\r\n        // const map = this.make.tilemap({ key: \"map\" });\r\n        // const layer = map.createStaticLayer(0, \"pipo-map001\", 0, 0);\r\n    }\r\n    create() {\r\n        setTimeout(() => {\r\n            this.scene.start(\"main\");\r\n        }, 1000);\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useEffect } from 'react';\n\nimport \"phaser\";\nimport MainScene from './MainScene';\nimport GameScene from './GameScene';\nimport BootstrapScene from './BootstrapScene';\nimport LoadingScene from './LoadingScene';\n\nconst App: React.FC = () => {\n  const app = React.createRef<HTMLDivElement>();\n\n  useEffect(() => {\n    const config: Phaser.Types.Core.GameConfig = {\n      type: Phaser.CANVAS,\n      height: 660,\n      width: 500,\n      scale: {\n        mode: Phaser.Scale.ScaleModes.FIT,\n      },\n      render: {\n        pixelArt: true\n      }\n    }\n    const game = new Phaser.Game(config);\n    game.scene.add(\"preload\", BootstrapScene);\n    game.scene.add(\"loading\", LoadingScene);\n    game.scene.add(\"main\", MainScene);\n    game.scene.add(\"game\", GameScene);\n    game.scene.start(\"preload\");\n  }, []);\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <div ref={app} className=\"App\">\n        {/* <MainPage /> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}